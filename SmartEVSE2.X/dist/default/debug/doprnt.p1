Version 3.2 HI-TECH Software Intermediate Code
[v F10 `(v ~T0 @X0 0 tf1`uc ]
"43 C:\Program Files\Microchip\xc8\v2.36\pic\include\c90\stdio.h
[s S1 `*uc 1 `*F10 1 ]
[n S1 __prbuf ptr func ]
"7 C:\Program Files\Microchip\xc8\v2.36\pic\include\c90\ctype.h
[v _isdigit `(b ~T0 @X0 0 ef1`uc ]
"13 C:\Program Files\Microchip\xc8\v2.36\pic\include\c90\stdarg.h
[v ___va_arg `(*v ~T0 @X0 0 ev`*v ]
[p i ___va_arg ]
[; ;xc8\pic\include\__size_t.h: 4: typedef unsigned size_t;
[; ;stdarg.h: 7: typedef void * va_list[1];
[; ;stdarg.h: 10: extern void * __va_start(void);
[; ;stdarg.h: 13: extern void * __va_arg(void *, ...);
[; ;stdio.h: 43: struct __prbuf
[; ;stdio.h: 44: {
[; ;stdio.h: 45: char * ptr;
[; ;stdio.h: 46: void (* func)(char);
[; ;stdio.h: 47: };
[; ;errno.h: 29: extern int errno;
[; ;conio.h: 12: extern void init_uart(void);
[; ;conio.h: 14: extern char getch(void);
[; ;conio.h: 15: extern char getche(void);
[; ;conio.h: 16: extern void putch(char);
[; ;conio.h: 17: extern void ungetch(char);
[; ;conio.h: 19: extern __bit kbhit(void);
[; ;conio.h: 23: extern char * cgets(char *);
[; ;conio.h: 24: extern void cputs(const char *);
[; ;stdio.h: 88: extern int cprintf(char *, ...);
[; ;stdio.h: 93: extern int _doprnt(struct __prbuf *, const register char *, register va_list);
[; ;stdio.h: 183: extern char * gets(char *);
[; ;stdio.h: 184: extern int puts(const char *);
[; ;stdio.h: 185: extern int scanf(const char *, ...) __attribute__((unsupported("scanf() is not supported by this compiler")));
[; ;stdio.h: 186: extern int sscanf(const char *, const char *, ...) __attribute__((unsupported("sscanf() is not supported by this compiler")));
[; ;stdio.h: 187: extern int vprintf(const char *, va_list) __attribute__((unsupported("vprintf() is not supported by this compiler")));
[; ;stdio.h: 188: extern int vsprintf(char *, const char *, va_list) __attribute__((unsupported("vsprintf() is not supported by this compiler")));
[; ;stdio.h: 189: extern int vscanf(const char *, va_list ap) __attribute__((unsupported("vscanf() is not supported by this compiler")));
[; ;stdio.h: 190: extern int vsscanf(const char *, const char *, va_list) __attribute__((unsupported("vsscanf() is not supported by this compiler")));
[; ;stdio.h: 194: extern int sprintf(char *, const char *, ...);
[; ;stdio.h: 195: extern int printf(const char *, ...);
[; ;ctype.h: 4: extern __bit isalpha(char);
[; ;ctype.h: 5: extern __bit isupper(char);
[; ;ctype.h: 6: extern __bit islower(char);
[; ;ctype.h: 7: extern __bit isdigit(char);
[; ;ctype.h: 8: extern __bit isxdigit(char);
[; ;ctype.h: 9: extern __bit isspace(char);
[; ;ctype.h: 10: extern __bit ispunct(char);
[; ;ctype.h: 11: extern __bit isalnum(char);
[; ;ctype.h: 12: extern __bit isprint(char);
[; ;ctype.h: 13: extern __bit isgraph(char);
[; ;ctype.h: 14: extern __bit iscntrl(char);
[; ;ctype.h: 17: extern char toupper(char);
[; ;ctype.h: 18: extern char tolower(char);
[; ;stdlib.h: 7: typedef unsigned short wchar_t;
[; ;stdlib.h: 15: typedef struct {
[; ;stdlib.h: 16: int rem;
[; ;stdlib.h: 17: int quot;
[; ;stdlib.h: 18: } div_t;
[; ;stdlib.h: 19: typedef struct {
[; ;stdlib.h: 20: unsigned rem;
[; ;stdlib.h: 21: unsigned quot;
[; ;stdlib.h: 22: } udiv_t;
[; ;stdlib.h: 23: typedef struct {
[; ;stdlib.h: 24: long quot;
[; ;stdlib.h: 25: long rem;
[; ;stdlib.h: 26: } ldiv_t;
[; ;stdlib.h: 27: typedef struct {
[; ;stdlib.h: 28: unsigned long quot;
[; ;stdlib.h: 29: unsigned long rem;
[; ;stdlib.h: 30: } uldiv_t;
[; ;stdlib.h: 65: extern double atof(const char *);
[; ;stdlib.h: 66: extern double strtod(const char *, const char **);
[; ;stdlib.h: 67: extern int atoi(const char *);
[; ;stdlib.h: 68: extern unsigned xtoi(const char *);
[; ;stdlib.h: 69: extern long atol(const char *);
[; ;stdlib.h: 73: extern long strtol(const char *, char **, int);
[; ;stdlib.h: 75: extern int rand(void);
[; ;stdlib.h: 76: extern void srand(unsigned int);
[; ;stdlib.h: 77: extern void * calloc(size_t, size_t);
[; ;stdlib.h: 78: extern div_t div(int numer, int denom);
[; ;stdlib.h: 79: extern udiv_t udiv(unsigned numer, unsigned denom);
[; ;stdlib.h: 80: extern ldiv_t ldiv(long numer, long denom);
[; ;stdlib.h: 81: extern uldiv_t uldiv(unsigned long numer,unsigned long denom);
[; ;stdlib.h: 85: extern unsigned long _lrotl(unsigned long value, unsigned int shift);
[; ;stdlib.h: 86: extern unsigned long _lrotr(unsigned long value, unsigned int shift);
[; ;stdlib.h: 87: extern unsigned int _rotl(unsigned int value, unsigned int shift);
[; ;stdlib.h: 88: extern unsigned int _rotr(unsigned int value, unsigned int shift);
[; ;stdlib.h: 93: extern void * malloc(size_t);
[; ;stdlib.h: 94: extern void free(void *);
[; ;stdlib.h: 95: extern void * realloc(void *, size_t);
[; ;xc8debug.h: 14: extern void __builtin_software_breakpoint(void);
[; ;stdlib.h: 104: extern int atexit(void (*)(void));
[; ;stdlib.h: 105: extern char * getenv(const char *);
[; ;stdlib.h: 106: extern char ** environ;
[; ;stdlib.h: 107: extern int system(char *);
[; ;stdlib.h: 108: extern void qsort(void *, size_t, size_t, int (*)(const void *, const void *));
[; ;stdlib.h: 109: extern void * bsearch(const void *, void *, size_t, size_t, int(*)(const void *, const void *));
[; ;stdlib.h: 110: extern int abs(int);
[; ;stdlib.h: 111: extern long labs(long);
[; ;stdlib.h: 113: extern char * itoa(char * buf, int val, int base);
[; ;stdlib.h: 114: extern char * utoa(char * buf, unsigned val, int base);
[; ;stdlib.h: 119: extern char * ltoa(char * buf, long val, int base);
[; ;stdlib.h: 120: extern char * ultoa(char * buf, unsigned long val, int base);
[; ;stdlib.h: 122: extern char * ftoa(float f, int * status);
[; ;string.h: 14: extern void * memcpy(void *, const void *, size_t);
[; ;string.h: 15: extern void * memmove(void *, const void *, size_t);
[; ;string.h: 16: extern void * memset(void *, int, size_t);
[; ;string.h: 36: extern char * strcat(char *, const char *);
[; ;string.h: 37: extern char * strcpy(char *, const char *);
[; ;string.h: 38: extern char * strncat(char *, const char *, size_t);
[; ;string.h: 39: extern char * strncpy(char *, const char *, size_t);
[; ;string.h: 40: extern char * strdup(const char *);
[; ;string.h: 41: extern char * strtok(char *, const char *);
[; ;string.h: 44: extern int memcmp(const void *, const void *, size_t);
[; ;string.h: 45: extern int strcmp(const char *, const char *);
[; ;string.h: 46: extern int stricmp(const char *, const char *);
[; ;string.h: 47: extern int strncmp(const char *, const char *, size_t);
[; ;string.h: 48: extern int strnicmp(const char *, const char *, size_t);
[; ;string.h: 49: extern void * memchr(const void *, int, size_t);
[; ;string.h: 50: extern size_t strcspn(const char *, const char *);
[; ;string.h: 51: extern char * strpbrk(const char *, const char *);
[; ;string.h: 52: extern size_t strspn(const char *, const char *);
[; ;string.h: 53: extern char * strstr(const char *, const char *);
[; ;string.h: 54: extern char * stristr(const char *, const char *);
[; ;string.h: 55: extern char * strerror(int);
[; ;string.h: 56: extern size_t strlen(const char *);
[; ;string.h: 57: extern char * strchr(const char *, int);
[; ;string.h: 58: extern char * strichr(const char *, int);
[; ;string.h: 59: extern char * strrchr(const char *, int);
[; ;string.h: 60: extern char * strrichr(const char *, int);
[; ;math.h: 30: extern double fabs(double);
[; ;math.h: 31: extern double floor(double);
[; ;math.h: 32: extern double ceil(double);
[; ;math.h: 33: extern double modf(double, double *);
[; ;math.h: 34: extern double sqrt(double);
[; ;math.h: 35: extern double atof(const char *);
[; ;math.h: 36: extern double sin(double) ;
[; ;math.h: 37: extern double cos(double) ;
[; ;math.h: 38: extern double tan(double) ;
[; ;math.h: 39: extern double asin(double) ;
[; ;math.h: 40: extern double acos(double) ;
[; ;math.h: 41: extern double atan(double);
[; ;math.h: 42: extern double atan2(double, double) ;
[; ;math.h: 43: extern double log(double);
[; ;math.h: 44: extern double log10(double);
[; ;math.h: 45: extern double pow(double, double) ;
[; ;math.h: 46: extern double exp(double) ;
[; ;math.h: 47: extern double sinh(double) ;
[; ;math.h: 48: extern double cosh(double) ;
[; ;math.h: 49: extern double tanh(double);
[; ;math.h: 50: extern double eval_poly(double, const double *, int);
[; ;math.h: 51: extern double frexp(double, int *);
[; ;math.h: 52: extern double ldexp(double, int);
[; ;math.h: 53: extern double fmod(double, double);
[; ;math.h: 54: extern double trunc(double);
[; ;math.h: 55: extern double round(double);
"12 C:\Program Files\Microchip\xc8\v2.36\pic\sources\c90\common\doprnt.c
[p n 350 ]
"358
[v _dpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _dpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 10 `i `l `ul
-> -> -> 100 `i `l `ul
-> -> -> 1000 `i `l `ul
-> -> -> 10000 `i `l `ul
"360
-> -> 100000 `l `ul
-> -> 1000000 `l `ul
-> -> 10000000 `l `ul
-> -> 100000000 `l `ul
"363
-> -> 1000000000 `l `ul
..
]
[; ;doprnt.c: 358: const static unsigned long dpowers[] = {1, 10, 100, 1000, 10000,
[; ;doprnt.c: 360: 100000, 1000000, 10000000, 100000000,
[; ;doprnt.c: 361: 1000000000
[; ;doprnt.c: 363: };
"366
[v _hexpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _hexpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 16 `i `l `ul
-> -> -> 256 `i `l `ul
-> -> -> 4096 `i `l `ul
"368
-> -> 65536 `l `ul
-> -> 1048576 `l `ul
-> -> 16777216 `l `ul
"370
-> -> 268435456 `l `ul
..
]
[; ;doprnt.c: 366: const static unsigned long hexpowers[] = {1, 0x10, 0x100, 0x1000,
[; ;doprnt.c: 368: 0x10000, 0x100000, 0x1000000, 0x10000000
[; ;doprnt.c: 370: };
"373
[v _octpowers `Cul ~T0 @X0 -> 0 `x s ]
[i _octpowers
:U ..
-> -> -> 1 `i `l `ul
-> -> -> 8 `i `l `ul
-> -> -> 64 `i `l `ul
-> -> -> 512 `i `l `ul
-> -> -> 4096 `i `l `ul
-> -> 32768 `ui `ul
"375
-> -> 262144 `l `ul
"376
-> -> 2097152 `l `ul
-> -> 16777216 `l `ul
-> -> 134217728 `l `ul
-> -> 1073741824 `l `ul
..
]
[; ;doprnt.c: 373: const static unsigned long octpowers[] = {1, 010, 0100, 01000, 010000, 0100000,
[; ;doprnt.c: 375: 01000000,
[; ;doprnt.c: 376: 010000000, 0100000000, 01000000000, 010000000000,
[; ;doprnt.c: 381: };
"471
[v __doprnt `(i ~T0 @X0 1 ef3`*S1`*Cuc`**v ]
"472
{
[; ;doprnt.c: 463: int
[; ;doprnt.c: 471: _doprnt(struct __prbuf * pb, register const char * f, register va_list ap)
[; ;doprnt.c: 472: {
[e :U __doprnt ]
"471
[v _pb `*S1 ~T0 @X0 1 r1 ]
[v _f `*Cuc ~T0 @X0 1 R2 ]
[v _ap `**v ~T0 @X0 1 R3 ]
"472
[f ]
"512
[v _c `uc ~T0 @X0 1 a ]
"514
[v _width `i ~T0 @X0 1 a ]
"517
[v _prec `i ~T0 @X0 1 a ]
"525
[v _flag `us ~T0 @X0 1 a ]
"540
[u S6 `ul 1 `d 1 ]
[n S6 . vd integ ]
"543
[v _tmpval `S6 ~T0 @X0 1 a ]
"545
[v _val `ul ~T0 @X0 1 a ]
"546
[v _len `ui ~T0 @X0 1 a ]
"547
[v _cp `*Cuc ~T0 @X0 1 a ]
[; ;doprnt.c: 512: char c;
[; ;doprnt.c: 514: int width;
[; ;doprnt.c: 517: int prec;
[; ;doprnt.c: 525: unsigned short flag;
[; ;doprnt.c: 540: union {
[; ;doprnt.c: 541: unsigned long vd;
[; ;doprnt.c: 542: double integ;
[; ;doprnt.c: 543: } tmpval;
[; ;doprnt.c: 545: unsigned long val;
[; ;doprnt.c: 546: unsigned len;
[; ;doprnt.c: 547: const char * cp;
[; ;doprnt.c: 553: while((c = *f++)) {
"553
[e $U 8  ]
[e :U 9 ]
{
[; ;doprnt.c: 555: if(c != '%')
"555
[e $ ! != -> _c `ui -> 37 `ui 11  ]
[; ;doprnt.c: 557: {
"557
{
[; ;doprnt.c: 558: do { if(pb->func) (pb->func((char)(c))); else ((*pb->ptr++ = (char)(c))); } while(0);
"558
[e :U 14 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 15  ]
[e ( *U . *U _pb 1 (1 _c ]
[e $U 16  ]
[e :U 15 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x _c ]
[e :U 16 ]
}
[e :U 13 ]
[; ;doprnt.c: 559: continue;
"559
[e $U 8  ]
"560
}
[e :U 11 ]
[; ;doprnt.c: 560: }
[; ;doprnt.c: 563: width = 0;
"563
[e = _width -> 0 `i ]
[; ;doprnt.c: 565: flag = 0;
"565
[e = _flag -> -> 0 `i `us ]
[; ;doprnt.c: 567: for(;;) {
"567
{
[e :U 17 ]
{
[; ;doprnt.c: 568: switch(*f) {
"568
[e $U 21  ]
{
[; ;doprnt.c: 570: case '-':
"570
[e :U 22 ]
[; ;doprnt.c: 571: flag |= 0x08;
"571
[e =| _flag -> -> 8 `i `us ]
[; ;doprnt.c: 572: f++;
"572
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 573: continue;
"573
[e $U 19  ]
[; ;doprnt.c: 577: case ' ':
"577
[e :U 23 ]
[; ;doprnt.c: 578: flag |= 0x01;
"578
[e =| _flag -> -> 1 `i `us ]
[; ;doprnt.c: 579: f++;
"579
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 580: continue;
"580
[e $U 19  ]
[; ;doprnt.c: 590: case '#':
"590
[e :U 24 ]
[; ;doprnt.c: 591: flag |= 0x800;
"591
[e =| _flag -> -> 2048 `i `us ]
[; ;doprnt.c: 592: f++;
"592
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 593: continue;
"593
[e $U 19  ]
[; ;doprnt.c: 596: case '0':
"596
[e :U 25 ]
[; ;doprnt.c: 597: flag |= 0x04;
"597
[e =| _flag -> -> 4 `i `us ]
[; ;doprnt.c: 598: f++;
"598
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 599: continue;
"599
[e $U 19  ]
"601
}
[; ;doprnt.c: 601: }
[e $U 20  ]
"568
[e :U 21 ]
[e [\ *U _f , $ -> -> 45 `ui `uc 22
 , $ -> -> 32 `ui `uc 23
 , $ -> -> 35 `ui `uc 24
 , $ -> -> 48 `ui `uc 25
 20 ]
"601
[e :U 20 ]
[; ;doprnt.c: 602: break;
"602
[e $U 18  ]
"603
}
[e :U 19 ]
[; ;doprnt.c: 603: }
[e $U 17  ]
[e :U 18 ]
}
[; ;doprnt.c: 610: if(flag & 0x08)
"610
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 26  ]
[; ;doprnt.c: 611: flag &= ~0x04;
"611
[e =& _flag -> ~ -> 4 `i `us ]
[e :U 26 ]
[; ;doprnt.c: 614: if(isdigit((unsigned)*f)) {
"614
[e $ ! ( _isdigit (1 -> -> *U _f `ui `uc 27  ]
{
[; ;doprnt.c: 615: width = 0;
"615
[e = _width -> 0 `i ]
[; ;doprnt.c: 616: do {
"616
[e :U 30 ]
{
[; ;doprnt.c: 617: width *= 10;
"617
[e =* _width -> 10 `i ]
[; ;doprnt.c: 618: width += *f++ - '0';
"618
[e =+ _width -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"619
}
[; ;doprnt.c: 619: } while(isdigit((unsigned)*f));
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 30  ]
[e :U 29 ]
"621
}
[; ;doprnt.c: 621: } else if(*f == '*') {
[e $U 31  ]
[e :U 27 ]
[e $ ! == -> *U _f `ui -> 42 `ui 32  ]
{
[; ;doprnt.c: 622: width = (*(int *)__va_arg((*(int **)ap), (int)0));
"622
[e = _width *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i ]
[; ;doprnt.c: 623: f++;
"623
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"625
}
[e :U 32 ]
"628
[e :U 31 ]
[; ;doprnt.c: 625: }
[; ;doprnt.c: 628: if(*f == '.') {
[e $ ! == -> *U _f `ui -> 46 `ui 33  ]
{
[; ;doprnt.c: 629: flag |= 0x4000;
"629
[e =| _flag -> -> 16384 `i `us ]
[; ;doprnt.c: 630: f++;
"630
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
[; ;doprnt.c: 632: if(*f == '*') {
"632
[e $ ! == -> *U _f `ui -> 42 `ui 34  ]
{
[; ;doprnt.c: 633: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
"633
[e = _prec *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i ]
[; ;doprnt.c: 634: if (prec < 0) {
"634
[e $ ! < _prec -> 0 `i 35  ]
{
[; ;doprnt.c: 635: prec = 0;
"635
[e = _prec -> 0 `i ]
[; ;doprnt.c: 636: flag &= ~0x4000;
"636
[e =& _flag -> ~ -> 16384 `i `us ]
"640
}
[e :U 35 ]
[; ;doprnt.c: 640: }
[; ;doprnt.c: 641: f++;
"641
[e ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x ]
"642
}
[; ;doprnt.c: 642: } else
[e $U 36  ]
[e :U 34 ]
[; ;doprnt.c: 644: {
"644
{
[; ;doprnt.c: 645: prec = 0;
"645
[e = _prec -> 0 `i ]
[; ;doprnt.c: 646: while(isdigit((unsigned)*f)) {
"646
[e $U 37  ]
[e :U 38 ]
{
[; ;doprnt.c: 647: prec *= 10;
"647
[e =* _prec -> 10 `i ]
[; ;doprnt.c: 648: prec += *f++ - '0';
"648
[e =+ _prec -> - -> *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `ui -> 48 `ui `i ]
"649
}
[e :U 37 ]
"646
[e $ ( _isdigit (1 -> -> *U _f `ui `uc 38  ]
[e :U 39 ]
"650
}
[e :U 36 ]
"651
}
[; ;doprnt.c: 649: }
[; ;doprnt.c: 650: }
[; ;doprnt.c: 651: } else {
[e $U 40  ]
[e :U 33 ]
{
[; ;doprnt.c: 652: prec = 0;
"652
[e = _prec -> 0 `i ]
"656
}
[e :U 40 ]
[; ;doprnt.c: 656: }
[; ;doprnt.c: 659: loop:
"659
[e :U 41 ]
[; ;doprnt.c: 661: switch(c = *f++) {
"661
[e $U 43  ]
{
[; ;doprnt.c: 663: case 0:
"663
[e :U 44 ]
[; ;doprnt.c: 664: goto alldone;
"664
[e $U 45  ]
[; ;doprnt.c: 667: case 'l':
"667
[e :U 46 ]
[; ;doprnt.c: 669: flag |= 0x10;
"669
[e =| _flag -> -> 16 `i `us ]
[; ;doprnt.c: 670: goto loop;
"670
[e $U 41  ]
[; ;doprnt.c: 715: case 'o':
"715
[e :U 47 ]
[; ;doprnt.c: 717: flag |= 0x40;
"717
[e =| _flag -> -> 64 `i `us ]
[; ;doprnt.c: 719: break;
"719
[e $U 42  ]
[; ;doprnt.c: 723: case 'd':
"723
[e :U 48 ]
"724
[e :U 49 ]
[; ;doprnt.c: 724: case 'i':
[; ;doprnt.c: 725: break;
"725
[e $U 42  ]
[; ;doprnt.c: 738: case 'X':
"738
[e :U 50 ]
[; ;doprnt.c: 740: flag |= 0x20;
"740
[e =| _flag -> -> 32 `i `us ]
[; ;doprnt.c: 744: case 'x':
"744
[e :U 51 ]
[; ;doprnt.c: 747: flag |= 0x80;
"747
[e =| _flag -> -> 128 `i `us ]
[; ;doprnt.c: 749: break;
"749
[e $U 42  ]
[; ;doprnt.c: 754: case 's':
"754
[e :U 52 ]
[; ;doprnt.c: 760: cp = (*(const char * *)__va_arg((*(const char * **)ap), (const char *)0));
"760
[e = _cp *U -> ( ___va_arg , (. -> *U -> _ap `***Cuc `*v -> -> 0 `i `*Cuc `**Cuc ]
[; ;doprnt.c: 766: if(!cp)
"766
[e $ ! ! != _cp -> -> 0 `i `*Cuc 53  ]
[; ;doprnt.c: 767: cp = "(null)";
"767
[e = _cp :s 1C ]
[e :U 53 ]
[; ;doprnt.c: 771: len = 0;
"771
[e = _len -> -> 0 `i `ui ]
[; ;doprnt.c: 772: while(cp[len])
"772
[e $U 54  ]
[e :U 55 ]
[; ;doprnt.c: 773: len++;
"773
[e ++ _len -> -> 1 `i `ui ]
[e :U 54 ]
"772
[e $ != -> *U + _cp * -> _len `ux -> -> # *U _cp `ui `ux `i -> -> -> 0 `i `Cuc `i 55  ]
[e :U 56 ]
[; ;doprnt.c: 776: dostring:
"776
[e :U 57 ]
[; ;doprnt.c: 779: if(prec && (prec < ((int)len)))
"779
[e $ ! && != _prec -> 0 `i < _prec -> _len `i 58  ]
[; ;doprnt.c: 780: len = (unsigned int)prec;
"780
[e = _len -> _prec `ui ]
[e :U 58 ]
[; ;doprnt.c: 783: if(((unsigned)width) > len)
"783
[e $ ! > -> _width `ui _len 59  ]
[; ;doprnt.c: 784: width -= len;
"784
[e =- _width -> _len `i ]
[e $U 60  ]
"785
[e :U 59 ]
[; ;doprnt.c: 785: else
[; ;doprnt.c: 786: width = 0;
"786
[e = _width -> 0 `i ]
[e :U 60 ]
[; ;doprnt.c: 788: if(!(flag & 0x08))
"788
[e $ ! ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 61  ]
[; ;doprnt.c: 790: while(width--)
"790
[e $U 62  ]
[e :U 63 ]
[; ;doprnt.c: 791: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"791
[e :U 67 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 68  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 69  ]
[e :U 68 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 69 ]
}
[e :U 66 ]
[e :U 62 ]
"790
[e $ != -- _width -> 1 `i -> 0 `i 63  ]
[e :U 64 ]
"791
[e :U 61 ]
[; ;doprnt.c: 793: while(len--)
"793
[e $U 70  ]
[e :U 71 ]
[; ;doprnt.c: 794: do { if(pb->func) (pb->func((char)(*cp++))); else ((*pb->ptr++ = (char)(*cp++))); } while(0);
"794
[e :U 75 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 76  ]
[e ( *U . *U _pb 1 (1 *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e $U 77  ]
[e :U 76 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x *U ++ _cp * -> -> 1 `i `x -> -> # *U _cp `i `x ]
[e :U 77 ]
}
[e :U 74 ]
[e :U 70 ]
"793
[e $ != -- _len -> -> 1 `i `ui -> -> 0 `i `ui 71  ]
[e :U 72 ]
[; ;doprnt.c: 796: if(flag & 0x08)
"796
[e $ ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 78  ]
[; ;doprnt.c: 797: while(width--)
"797
[e $U 79  ]
[e :U 80 ]
[; ;doprnt.c: 798: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"798
[e :U 84 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 85  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 86  ]
[e :U 85 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 86 ]
}
[e :U 83 ]
[e :U 79 ]
"797
[e $ != -- _width -> 1 `i -> 0 `i 80  ]
[e :U 81 ]
"798
[e :U 78 ]
[; ;doprnt.c: 800: continue;
"800
[e $U 8  ]
[; ;doprnt.c: 810: case 'c':
"810
[e :U 87 ]
[; ;doprnt.c: 825: c = (char)(*(int *)__va_arg((*(int **)ap), (int)0));
"825
[e = _c -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `uc ]
[; ;doprnt.c: 828: default:
"828
[e :U 88 ]
[; ;doprnt.c: 831: cp = (char *)&c;
"831
[e = _cp -> &U _c `*Cuc ]
[; ;doprnt.c: 832: len = 1;
"832
[e = _len -> -> 1 `i `ui ]
[; ;doprnt.c: 833: goto dostring;
"833
[e $U 57  ]
[; ;doprnt.c: 843: case 'u':
"843
[e :U 89 ]
[; ;doprnt.c: 844: flag |= 0xC0;
"844
[e =| _flag -> -> 192 `i `us ]
[; ;doprnt.c: 845: break;
"845
[e $U 42  ]
"848
}
[; ;doprnt.c: 848: }
[e $U 42  ]
"661
[e :U 43 ]
[e [\ = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x , $ -> -> 0 `i `uc 44
 , $ -> -> 108 `ui `uc 46
 , $ -> -> 111 `ui `uc 47
 , $ -> -> 100 `ui `uc 48
 , $ -> -> 105 `ui `uc 49
 , $ -> -> 88 `ui `uc 50
 , $ -> -> 120 `ui `uc 51
 , $ -> -> 115 `ui `uc 52
 , $ -> -> 99 `ui `uc 87
 , $ -> -> 117 `ui `uc 89
 88 ]
"848
[e :U 42 ]
[; ;doprnt.c: 1277: if((flag & (0xC0)) == 0x00)
"1277
[e $ ! == & -> _flag `ui -> -> 192 `i `ui -> -> 0 `i `ui 90  ]
[; ;doprnt.c: 1279: {
"1279
{
[; ;doprnt.c: 1281: if(flag & 0x10)
"1281
[e $ ! != & -> _flag `ui -> -> 16 `i `ui -> -> 0 `i `ui 91  ]
[; ;doprnt.c: 1282: val = (unsigned long)(*(long *)__va_arg((*(long **)ap), (long)0));
"1282
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**l `*v -> -> 0 `i `l `*l `ul ]
[e $U 92  ]
"1283
[e :U 91 ]
[; ;doprnt.c: 1283: else
[; ;doprnt.c: 1285: val = (unsigned long)(*(int *)__va_arg((*(int **)ap), (int)0));
"1285
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**i `*v -> 0 `i `*i `ul ]
[e :U 92 ]
[; ;doprnt.c: 1287: if((long)val < 0) {
"1287
[e $ ! < -> _val `l -> -> 0 `i `l 93  ]
{
[; ;doprnt.c: 1288: flag |= 0x03;
"1288
[e =| _flag -> -> 3 `i `us ]
[; ;doprnt.c: 1289: val = -val;
"1289
[e = _val -U _val ]
"1290
}
[e :U 93 ]
"1292
}
[; ;doprnt.c: 1290: }
[; ;doprnt.c: 1292: }
[e $U 94  ]
"1294
[e :U 90 ]
[; ;doprnt.c: 1294: else
[; ;doprnt.c: 1299: {
"1299
{
[; ;doprnt.c: 1307: if(flag & 0x10)
"1307
[e $ ! != & -> _flag `ui -> -> 16 `i `ui -> -> 0 `i `ui 95  ]
[; ;doprnt.c: 1308: val = (*(unsigned long *)__va_arg((*(unsigned long **)ap), (unsigned long)0));
"1308
[e = _val *U -> ( ___va_arg , (. -> *U -> _ap `**ul `*v -> -> 0 `i `ul `*ul ]
[e $U 96  ]
"1309
[e :U 95 ]
[; ;doprnt.c: 1309: else
[; ;doprnt.c: 1312: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
"1312
[e = _val -> *U -> ( ___va_arg , (. -> *U -> _ap `**ui `*v -> -> 0 `i `ui `*ui `ul ]
[e :U 96 ]
"1313
}
[e :U 94 ]
[; ;doprnt.c: 1313: }
[; ;doprnt.c: 1316: if(prec == 0 && val == 0)
"1316
[e $ ! && == _prec -> 0 `i == _val -> -> -> 0 `i `l `ul 97  ]
[; ;doprnt.c: 1317: prec++;
"1317
[e ++ _prec -> 1 `i ]
[e :U 97 ]
[; ;doprnt.c: 1320: switch((unsigned char)(flag & (0xC0))) {
"1320
[e $U 99  ]
{
[; ;doprnt.c: 1325: case 0x00:
"1325
[e :U 100 ]
"1328
[e :U 101 ]
[; ;doprnt.c: 1328: case 0xC0:
[; ;doprnt.c: 1331: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
"1331
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 102  ]
[e $U 103  ]
"1332
[e :U 102 ]
[; ;doprnt.c: 1332: if(val < dpowers[c])
[e $ ! < _val *U + &U _dpowers * -> _c `ux -> -> # *U &U _dpowers `ui `ux 105  ]
[; ;doprnt.c: 1333: break;
"1333
[e $U 103  ]
[e :U 105 ]
"1331
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _dpowers `ui -> # *U + &U _dpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _dpowers `ui `ux `ui 102  ]
[e :U 103 ]
"1335
}
[; ;doprnt.c: 1335: break;
[e $U 98  ]
[; ;doprnt.c: 1340: case 0x80:
"1340
[e :U 106 ]
[; ;doprnt.c: 1342: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
"1342
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 107  ]
[e $U 108  ]
"1343
[e :U 107 ]
[; ;doprnt.c: 1343: if(val < hexpowers[c])
[e $ ! < _val *U + &U _hexpowers * -> _c `ux -> -> # *U &U _hexpowers `ui `ux 110  ]
[; ;doprnt.c: 1344: break;
"1344
[e $U 108  ]
[e :U 110 ]
"1342
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _hexpowers `ui -> # *U + &U _hexpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _hexpowers `ui `ux `ui 107  ]
[e :U 108 ]
"1346
}
[; ;doprnt.c: 1346: break;
[e $U 98  ]
[; ;doprnt.c: 1352: case 0x40:
"1352
[e :U 111 ]
[; ;doprnt.c: 1354: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
"1354
{
[e = _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 112  ]
[e $U 113  ]
"1355
[e :U 112 ]
[; ;doprnt.c: 1355: if(val < octpowers[c])
[e $ ! < _val *U + &U _octpowers * -> _c `ux -> -> # *U &U _octpowers `ui `ux 115  ]
[; ;doprnt.c: 1356: break;
"1356
[e $U 113  ]
[e :U 115 ]
"1354
[e ++ _c -> -> 1 `i `uc ]
[e $ != -> _c `ui / -> # _octpowers `ui -> # *U + &U _octpowers * -> -> -> 0 `i `ui `ux -> -> # *U &U _octpowers `ui `ux `ui 112  ]
[e :U 113 ]
"1358
}
[; ;doprnt.c: 1358: break;
[e $U 98  ]
"1362
}
[; ;doprnt.c: 1362: }
[e $U 98  ]
"1320
[e :U 99 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 100
 , $ -> -> 192 `i `uc 101
 , $ -> -> 128 `i `uc 106
 , $ -> -> 64 `i `uc 111
 98 ]
"1362
[e :U 98 ]
[; ;doprnt.c: 1365: if(c < prec)
"1365
[e $ ! < -> _c `i _prec 116  ]
[; ;doprnt.c: 1366: c = (char)prec;
"1366
[e = _c -> _prec `uc ]
[e $U 117  ]
"1367
[e :U 116 ]
[; ;doprnt.c: 1367: else if(prec < c)
[e $ ! < _prec -> _c `i 118  ]
[; ;doprnt.c: 1368: prec = c;
"1368
[e = _prec -> _c `i ]
[e :U 118 ]
"1371
[e :U 117 ]
[; ;doprnt.c: 1371: if(width && flag & 0x03)
[e $ ! && != _width -> 0 `i != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 119  ]
[; ;doprnt.c: 1372: width--;
"1372
[e -- _width -> 1 `i ]
[e :U 119 ]
[; ;doprnt.c: 1374: if(flag & 0x4000) {
"1374
[e $ ! != & -> _flag `ui -> -> 16384 `i `ui -> -> 0 `i `ui 120  ]
{
[; ;doprnt.c: 1375: if(width > prec)
"1375
[e $ ! > _width _prec 121  ]
[; ;doprnt.c: 1376: width -= prec;
"1376
[e =- _width _prec ]
[e $U 122  ]
"1377
[e :U 121 ]
[; ;doprnt.c: 1377: else
[; ;doprnt.c: 1378: width = 0;
"1378
[e = _width -> 0 `i ]
[e :U 122 ]
"1379
}
[e :U 120 ]
[; ;doprnt.c: 1379: }
[; ;doprnt.c: 1383: if((flag & (
[; ;doprnt.c: 1385: 0x04|
[; ;doprnt.c: 1387: (0xC0)|0x800)) == (0x40|0x800)) {
"1387
[e $ ! == & -> _flag `ui -> | | -> 4 `i -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 123  ]
{
[; ;doprnt.c: 1388: if(width)
"1388
[e $ ! != _width -> 0 `i 124  ]
[; ;doprnt.c: 1389: width--;
"1389
[e -- _width -> 1 `i ]
[e :U 124 ]
"1390
}
[; ;doprnt.c: 1390: } else
[e $U 125  ]
[e :U 123 ]
[; ;doprnt.c: 1394: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1394
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 126  ]
{
[; ;doprnt.c: 1398: if(width > 2)
"1398
[e $ ! > _width -> 2 `i 127  ]
[; ;doprnt.c: 1399: width -= 2;
"1399
[e =- _width -> 2 `i ]
[e $U 128  ]
"1400
[e :U 127 ]
[; ;doprnt.c: 1400: else
[; ;doprnt.c: 1401: width = 0;
"1401
[e = _width -> 0 `i ]
[e :U 128 ]
"1402
}
[e :U 126 ]
"1407
[e :U 125 ]
[; ;doprnt.c: 1402: }
[; ;doprnt.c: 1407: if(width > c)
[e $ ! > _width -> _c `i 129  ]
[; ;doprnt.c: 1408: width -= c;
"1408
[e =- _width -> _c `i ]
[e $U 130  ]
"1409
[e :U 129 ]
[; ;doprnt.c: 1409: else
[; ;doprnt.c: 1410: width = 0;
"1410
[e = _width -> 0 `i ]
[e :U 130 ]
[; ;doprnt.c: 1413: if(flag & 0x04) {
"1413
[e $ ! != & -> _flag `ui -> -> 4 `i `ui -> -> 0 `i `ui 131  ]
{
[; ;doprnt.c: 1418: if(flag & 0x03)
"1418
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 132  ]
[; ;doprnt.c: 1419: do { if(pb->func) (pb->func((char)('-'))); else ((*pb->ptr++ = (char)('-'))); } while(0);
"1419
[e :U 135 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 136  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 137  ]
[e :U 136 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 137 ]
}
[e :U 134 ]
[e $U 138  ]
"1422
[e :U 132 ]
[; ;doprnt.c: 1422: else
[; ;doprnt.c: 1425: if(flag & 0x01)
"1425
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 139  ]
[; ;doprnt.c: 1426: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"1426
[e :U 142 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 143  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 144  ]
[e :U 143 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 144 ]
}
[e :U 141 ]
[e $U 145  ]
"1429
[e :U 139 ]
[; ;doprnt.c: 1429: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 146  ]
{
[; ;doprnt.c: 1430: do { if(pb->func) (pb->func((char)('0'))); else ((*pb->ptr++ = (char)('0'))); } while(0);
"1430
[e :U 149 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 150  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 151  ]
[e :U 150 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 151 ]
}
[e :U 148 ]
[; ;doprnt.c: 1432: do { if(pb->func) (pb->func((char)(flag & 0x20 ? 'X' : 'x'))); else ((*pb->ptr++ = (char)(flag & 0x20 ? 'X' : 'x'))); } while(0);
"1432
[e :U 154 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 155  ]
[e ( *U . *U _pb 1 (1 -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e $U 156  ]
[e :U 155 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e :U 156 ]
}
[e :U 153 ]
"1438
}
[e :U 146 ]
"1441
[e :U 145 ]
[e :U 138 ]
[; ;doprnt.c: 1438: }
[; ;doprnt.c: 1441: if(width)
[e $ ! != _width -> 0 `i 157  ]
[; ;doprnt.c: 1442: do
"1442
[e :U 160 ]
[; ;doprnt.c: 1443: do { if(pb->func) (pb->func((char)('0'))); else ((*pb->ptr++ = (char)('0'))); } while(0);
"1443
[e :U 163 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 164  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 165  ]
[e :U 164 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 165 ]
}
[e :U 162 ]
[; ;doprnt.c: 1444: while(--width);
"1444
[e $ != =- _width -> 1 `i -> 0 `i 160  ]
[e :U 159 ]
[e :U 157 ]
"1446
}
[; ;doprnt.c: 1446: } else
[e $U 166  ]
[e :U 131 ]
[; ;doprnt.c: 1448: {
"1448
{
[; ;doprnt.c: 1450: if(width
[; ;doprnt.c: 1452: && !(flag & 0x08)
[; ;doprnt.c: 1454: )
"1454
[e $ ! && != _width -> 0 `i ! != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui 167  ]
[; ;doprnt.c: 1455: do
"1455
[e :U 170 ]
[; ;doprnt.c: 1456: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"1456
[e :U 173 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 174  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 175  ]
[e :U 174 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 175 ]
}
[e :U 172 ]
[; ;doprnt.c: 1457: while(--width);
"1457
[e $ != =- _width -> 1 `i -> 0 `i 170  ]
[e :U 169 ]
[e :U 167 ]
[; ;doprnt.c: 1464: if(flag & 0x03)
"1464
[e $ ! != & -> _flag `ui -> -> 3 `i `ui -> -> 0 `i `ui 176  ]
[; ;doprnt.c: 1465: do { if(pb->func) (pb->func((char)('-'))); else ((*pb->ptr++ = (char)('-'))); } while(0);
"1465
[e :U 179 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 180  ]
[e ( *U . *U _pb 1 (1 -> -> 45 `ui `uc ]
[e $U 181  ]
[e :U 180 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 45 `ui `uc ]
[e :U 181 ]
}
[e :U 178 ]
[e $U 182  ]
"1469
[e :U 176 ]
[; ;doprnt.c: 1469: else if(flag & 0x01)
[e $ ! != & -> _flag `ui -> -> 1 `i `ui -> -> 0 `i `ui 183  ]
[; ;doprnt.c: 1470: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"1470
[e :U 186 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 187  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 188  ]
[e :U 187 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 188 ]
}
[e :U 185 ]
[e :U 183 ]
"1474
[e :U 182 ]
[; ;doprnt.c: 1474: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 64 `i -> 2048 `i `ui 189  ]
[; ;doprnt.c: 1475: do { if(pb->func) (pb->func((char)('0'))); else ((*pb->ptr++ = (char)('0'))); } while(0);
"1475
[e :U 192 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 193  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 194  ]
[e :U 193 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 194 ]
}
[e :U 191 ]
[e $U 195  ]
"1476
[e :U 189 ]
[; ;doprnt.c: 1476: else
[; ;doprnt.c: 1480: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
"1480
[e $ ! == & -> _flag `ui -> | -> 192 `i -> 2048 `i `ui -> | -> 128 `i -> 2048 `i `ui 196  ]
{
[; ;doprnt.c: 1484: do { if(pb->func) (pb->func((char)('0'))); else ((*pb->ptr++ = (char)('0'))); } while(0);
"1484
[e :U 199 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 200  ]
[e ( *U . *U _pb 1 (1 -> -> 48 `ui `uc ]
[e $U 201  ]
[e :U 200 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 48 `ui `uc ]
[e :U 201 ]
}
[e :U 198 ]
[; ;doprnt.c: 1486: do { if(pb->func) (pb->func((char)(flag & 0x20 ? 'X' : 'x'))); else ((*pb->ptr++ = (char)(flag & 0x20 ? 'X' : 'x'))); } while(0);
"1486
[e :U 204 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 205  ]
[e ( *U . *U _pb 1 (1 -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e $U 206  ]
[e :U 205 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : -> 88 `ui -> 120 `ui `uc ]
[e :U 206 ]
}
[e :U 203 ]
"1492
}
[e :U 196 ]
"1495
[e :U 195 ]
}
[e :U 166 ]
[; ;doprnt.c: 1492: }
[; ;doprnt.c: 1495: }
[; ;doprnt.c: 1500: while(prec--) {
"1500
[e $U 207  ]
[e :U 208 ]
{
[; ;doprnt.c: 1502: switch((unsigned char)(flag & (0xC0)))
"1502
[e $U 211  ]
[; ;doprnt.c: 1504: {
"1504
{
[; ;doprnt.c: 1509: case 0x00:
"1509
[e :U 212 ]
"1512
[e :U 213 ]
[; ;doprnt.c: 1512: case 0xC0:
[; ;doprnt.c: 1515: c = (val / dpowers[(unsigned int)prec]) % 10 + '0';
"1515
[e = _c -> + % / _val *U + &U _dpowers * -> -> _prec `ui `ux -> -> # *U &U _dpowers `ui `ux -> -> -> 10 `i `l `ul -> -> 48 `ui `ul `uc ]
[; ;doprnt.c: 1517: break;
"1517
[e $U 210  ]
[; ;doprnt.c: 1523: case 0x80:
"1523
[e :U 214 ]
[; ;doprnt.c: 1525: {
"1525
{
"1526
[v _idx `uc ~T0 @X0 1 a ]
[; ;doprnt.c: 1526: unsigned char idx = (val / hexpowers[(unsigned int)prec]) & 0xF;
[e = _idx -> & / _val *U + &U _hexpowers * -> -> _prec `ui `ux -> -> # *U &U _hexpowers `ui `ux -> -> -> 15 `i `l `ul `uc ]
[; ;doprnt.c: 1528: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
"1528
[e = _c *U + ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 2C :s 3C * -> _idx `ux -> -> # *U ? != & -> _flag `ui -> -> 32 `i `ui -> -> 0 `i `ui : :s 2C :s 3C `ui `ux ]
"1534
}
[; ;doprnt.c: 1534: }
[; ;doprnt.c: 1536: break;
"1536
[e $U 210  ]
[; ;doprnt.c: 1542: case 0x40:
"1542
[e :U 215 ]
[; ;doprnt.c: 1544: c = ((val / octpowers[(unsigned int)prec]) & 07) + '0';
"1544
[e = _c -> + & / _val *U + &U _octpowers * -> -> _prec `ui `ux -> -> # *U &U _octpowers `ui `ux -> -> -> 7 `i `l `ul -> -> 48 `ui `ul `uc ]
[; ;doprnt.c: 1546: break;
"1546
[e $U 210  ]
"1549
}
[; ;doprnt.c: 1549: }
[e $U 210  ]
"1502
[e :U 211 ]
[e [\ -> & -> _flag `ui -> -> 192 `i `ui `uc , $ -> -> 0 `i `uc 212
 , $ -> -> 192 `i `uc 213
 , $ -> -> 128 `i `uc 214
 , $ -> -> 64 `i `uc 215
 210 ]
"1549
[e :U 210 ]
[; ;doprnt.c: 1550: do { if(pb->func) (pb->func((char)(c))); else ((*pb->ptr++ = (char)(c))); } while(0);
"1550
[e :U 218 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 219  ]
[e ( *U . *U _pb 1 (1 _c ]
[e $U 220  ]
[e :U 219 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x _c ]
[e :U 220 ]
}
[e :U 217 ]
"1551
}
[e :U 207 ]
"1500
[e $ != -- _prec -> 1 `i -> 0 `i 208  ]
[e :U 209 ]
[; ;doprnt.c: 1551: }
[; ;doprnt.c: 1554: if((flag & 0x08) && width > 0)
"1554
[e $ ! && != & -> _flag `ui -> -> 8 `i `ui -> -> 0 `i `ui > _width -> 0 `i 221  ]
[; ;doprnt.c: 1555: do
"1555
[e :U 224 ]
[; ;doprnt.c: 1556: do { if(pb->func) (pb->func((char)(' '))); else ((*pb->ptr++ = (char)(' '))); } while(0);
"1556
[e :U 227 ]
{
[e $ ! != . *U _pb 1 -> -> 0 `i `*F10 228  ]
[e ( *U . *U _pb 1 (1 -> -> 32 `ui `uc ]
[e $U 229  ]
[e :U 228 ]
[e = *U ++ . *U _pb 0 * -> -> 1 `i `x -> -> # *U . *U _pb 0 `i `x -> -> 32 `ui `uc ]
[e :U 229 ]
}
[e :U 226 ]
[; ;doprnt.c: 1557: while(--width);
"1557
[e $ != =- _width -> 1 `i -> 0 `i 224  ]
[e :U 223 ]
[e :U 221 ]
"1559
}
[e :U 8 ]
"553
[e $ != -> = _c *U ++ _f * -> -> 1 `i `x -> -> # *U _f `i `x `i -> -> -> 0 `i `uc `i 9  ]
[e :U 10 ]
[; ;doprnt.c: 1559: }
[; ;doprnt.c: 1561: alldone:
"1561
[e :U 45 ]
[; ;doprnt.c: 1566: return 0;
"1566
[e ) -> 0 `i ]
[e $UE 7  ]
[; ;doprnt.c: 1567: }
"1567
[e :UE 7 ]
}
[a 3C 48 49 50 51 52 53 54 55 56 57 97 98 99 100 101 102 0 ]
[a 2C 48 49 50 51 52 53 54 55 56 57 65 66 67 68 69 70 0 ]
[a 1C 40 110 117 108 108 41 0 ]
